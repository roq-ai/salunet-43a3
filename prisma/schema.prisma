generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model clinic {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?  @db.VarChar(255)
  address       String?  @db.VarChar(255)
  phone         String?  @db.VarChar(255)
  opening_hours String?  @db.VarChar(255)
  name          String   @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  user_id       String   @db.Uuid
  tenant_id     String   @db.VarChar(255)
  user          user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model exam {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id String   @db.Uuid
  doctor_id  String   @db.Uuid
  date       DateTime @db.Timestamp(6)
  type       String   @db.VarChar(255)
  result     String   @db.VarChar(255)
  notes      String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient    patient  @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  file       file[]
}

model file {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  exam_id     String   @db.Uuid
  name        String   @db.VarChar(255)
  type        String   @db.VarChar(255)
  size        Int
  upload_date DateTime @db.Timestamp(6)
  path        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  exam        exam     @relation(fields: [exam_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String         @db.Uuid
  date_of_birth     DateTime       @db.Timestamp(6)
  gender            String         @db.VarChar(255)
  address           String         @db.VarChar(255)
  phone             String         @db.VarChar(255)
  emergency_contact String         @db.VarChar(255)
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  exam              exam[]
  user              user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prescription      prescription[]
}

model prescription {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id String   @db.Uuid
  doctor_id  String   @db.Uuid
  date       DateTime @db.Timestamp(6)
  medicine   String   @db.VarChar(255)
  dosage     String   @db.VarChar(255)
  duration   String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient    patient  @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  clinic       clinic[]
  exam         exam[]
  patient      patient[]
  prescription prescription[]
}
